/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "redis-priv-operator/pkg/apis/tdb/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MysqlProxyLister helps list MysqlProxies.
type MysqlProxyLister interface {
	// List lists all MysqlProxies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MysqlProxy, err error)
	// MysqlProxies returns an object that can list and get MysqlProxies.
	MysqlProxies(namespace string) MysqlProxyNamespaceLister
	MysqlProxyListerExpansion
}

// mysqlProxyLister implements the MysqlProxyLister interface.
type mysqlProxyLister struct {
	indexer cache.Indexer
}

// NewMysqlProxyLister returns a new MysqlProxyLister.
func NewMysqlProxyLister(indexer cache.Indexer) MysqlProxyLister {
	return &mysqlProxyLister{indexer: indexer}
}

// List lists all MysqlProxies in the indexer.
func (s *mysqlProxyLister) List(selector labels.Selector) (ret []*v1alpha1.MysqlProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MysqlProxy))
	})
	return ret, err
}

// MysqlProxies returns an object that can list and get MysqlProxies.
func (s *mysqlProxyLister) MysqlProxies(namespace string) MysqlProxyNamespaceLister {
	return mysqlProxyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MysqlProxyNamespaceLister helps list and get MysqlProxies.
type MysqlProxyNamespaceLister interface {
	// List lists all MysqlProxies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MysqlProxy, err error)
	// Get retrieves the MysqlProxy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MysqlProxy, error)
	MysqlProxyNamespaceListerExpansion
}

// mysqlProxyNamespaceLister implements the MysqlProxyNamespaceLister
// interface.
type mysqlProxyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MysqlProxies in the indexer for a given namespace.
func (s mysqlProxyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MysqlProxy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MysqlProxy))
	})
	return ret, err
}

// Get retrieves the MysqlProxy from the indexer for a given namespace and name.
func (s mysqlProxyNamespaceLister) Get(name string) (*v1alpha1.MysqlProxy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mysqlproxy"), name)
	}
	return obj.(*v1alpha1.MysqlProxy), nil
}
