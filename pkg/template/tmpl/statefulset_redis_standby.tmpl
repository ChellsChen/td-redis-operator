apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    APPNAME: redis
    CLUSTER: {{ .Name }}
    DC: "{{ .Spec.DC }}"
    ENV: "{{ .Spec.ENV }}"
    RESOURCE_ID: {{ .Name }}
  name: {{ .Name }}
  namespace: redis
spec:
  replicas: 2
  selector:
    matchLabels:
      CLUSTER: {{ .Name }}
  serviceName: {{ .Name }}
  template:
    metadata:
      labels:
        APPNAME: redis
        CLUSTER: {{ .Name }}
        DC: "{{ .Spec.DC }}"
        ENV: "{{ .Spec.ENV }}"
        RESOURCE_ID: {{ .Name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                RESOURCE_ID: {{ .Name }}
            topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: REDIS_PASSWORD
          value: {{ .Spec.Secret }}
        image: "{{ .Spec.MonitorImage }}"
        imagePullPolicy: Always
        lifecycle:
          preStop:
            exec:
              command:
                - /bin/bash
                - -c
                - ps -ef|grep run.sh|awk '{print $2}'|xargs kill -9
        name: {{ .Name }}-prometheus-sidecar
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          ports:
            - containerPort: 9121
              name: sidecar-port
              protocol: TCP
      - env:
        - name: APP_CLUSTER
          value: {{ .Spec.App }}
        - name: REMOTE_BACKUPSERVER
          value: 192.168.6.188
        image: "{{ .Spec.Image }}"
        imagePullPolicy: IfNotPresent
        livenessProbe:
           exec:
             command:
              - python
              - /usr/local/bin/check_ok.py
           failureThreshold: 3
           initialDelaySeconds: 900
           periodSeconds: 5
           successThreshold: 1
           timeoutSeconds: 10
        readinessProbe:
           exec:
             command:
              - python
              - /usr/local/bin/check_master.py
           failureThreshold: 1
           periodSeconds: 1
           successThreshold: 1
           timeoutSeconds: 10
        name: {{ .Name }}
        ports:
        - containerPort: 6379
          name: redis-port
          protocol: TCP
        resources:
          limits:
            cpu: "2"
          requests:
            cpu: "2"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /proc/cpuinfo
          name: lxcfs-cpuinfo
        - mountPath: /proc/diskstats
          name: lxcfs-diskstats
        - mountPath: /proc/meminfo
          name: lxcfs-meminfo
        - mountPath: /proc/swaps
          name: lxcfs-swaps
        - mountPath: /proc/uptime
          name: lxcfs-uptime
        - mountPath: /home/admin/redis/data
          name: redis-data
        - name: config
          mountPath: /home/admin/redis/.rediscfg
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: harbor-secret
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - hostPath:
          path: /var/lib/lxcfs-cpuinfo/cpuinfo2
          type: ""
        name: lxcfs-cpuinfo
      - hostPath:
          path: /var/lib/lxcfs/proc/diskstats
          type: ""
        name: lxcfs-diskstats
      - hostPath:
          path: /var/lib/lxcfs/proc/meminfo
          type: ""
        name: lxcfs-meminfo
      - hostPath:
          path: /var/lib/lxcfs/proc/stat
          type: ""
        name: lxcfs-stat
      - hostPath:
          path: /var/lib/lxcfs/proc/swaps
          type: ""
        name: lxcfs-swaps
      - hostPath:
          path: /var/lib/lxcfs/proc/uptime
          type: ""
        name: lxcfs-uptime
      - name: config
        configMap:
          name: {{ .Name }}
      {{ if .Spec.StorageClass -}}
      {{ else -}}
      - emptyDir: {}
        name: redis-data
      {{- end }}
  {{ if .Spec.StorageClass -}}
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      namespace: {{ .Namespace }}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 64Gi
      storageClassName: {{ .Spec.StorageClass }}
      volumeMode: Filesystem
  {{- end }}
  updateStrategy:
    type: OnDelete